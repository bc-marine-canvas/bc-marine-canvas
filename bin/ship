#!/bin/bash
# Builds a Docker image and runs it on production.

id='bc_custom_canvas'
root="$(git rev-parse --show-toplevel)"
old_version="$(cat "$root/VERSION")"
branch="$(git symbolic-ref --short -q HEAD)"

# Options
bump='minor'
quiet=''
prune=''

print_usage() {
cat <<EOM
Usage: ship [OPTION]

Options:
  -b [ARG]    type of version bump (major, minor, or patch)
  -h          display this help message
  -p          prune merged branches
  -q          minimal output

EOM
}

get_options() {
  while getopts 'b:hpq' flag; do
    case "${flag}" in
      b) bump="${OPTARG}" ;;
      h) print_usage exit ;;
      p) prune='true' ;;
      q) quiet='true' ;;
      *) print_usage; exit 1 ;;
    esac
  done
}

info() {
  [ -n "$quiet" ] || echo -e "$1"
}

error() {
  echo -e >&2 "Error: $1"
  exit 1
}

on_master() {
  [ "$branch" == "master" ]
}

up_to_date() {
  git fetch --all

  local_sha="$(git rev-parse "$branch")"
  remote_sha="$(git rev-parse "origin/$branch")"

  [ "$local_sha" == "$remote_sha" ]
}

working_dir_clean() {
  [ -z "$(git status --porcelain)" ]
}

version() {
  cat "$root/VERSION"
}

bump_version() {
  local bump_command="docker run --rm -it -v $PWD:/app -w /app "
  bump_command+="treeder/bump --filename VERSION $bump"
  eval "$bump_command" >/dev/null 2>&1

  info "Version bumped from $old_version to $(version)."
}

build_image() {
  sh "$root/bin/build" "$id" "$root"
}

commit() {
  git add -A
  git commit -m "$(version)"
  git tag -a "$(version)" -m "v$(version)"

  docker tag "jbboynton/$id:latest" "jbboynton/$id:$(version)"

  docker push "jbboynton/$id:latest"
  docker push "jbboynton/$id:$(version)"

  git push origin "$branch"
  git push origin --tags

  info "v$(version) has been pushed to GitHub and Docker Hub."
}

pull_new_image() {
  ssh "$id" "/bin/sh /ops/ci/build.sh" >/dev/null
}

merged_branches() {
  git branch --merged | grep -Ev "(^\*|master)"
}

merged_branches_exist() {
  branches_exist=1

  [ -z "$(merged_branches)" ] || branches_exist=0

  return "$branches_exist"
}

preparing_to_delete() {
  info "Preparing to delete the following merged branches:\n"
  info "$(merged_branches | column -t)\n"
}

prompt_to_prune() {
  prompt_response=1
  read -p "Delete these branches? [y|n] " -n 1 -r; echo

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    prompt_response=0
  else
    info "Not deleting any branches."
  fi

  return "$prompt_response"
}

will_prune() {
  prompt_to_prune || [ -n "$prune" ]
}

local_branch_exists() {
  branch="$1"

  git rev-parse --verify "$branch" | wc -l >/dev/null
}

delete_local_branch() {
  branch="$1"

  if local_branch_exists "$branch"; then
    git branch -d "$branch" && info "Deleted local branch:  $branch"
  fi
}

remote_branch_exists() {
  branch="$1"
  repo="$(git config --get remote.origin.url)"

  git ls-remote --heads "$repo" "$branch" | wc -l >/dev/null
}

delete_remote_branch() {
  branch="$1"

  if remote_branch_exists "$branch"; then
    git push --delete origin "$branch" && info "Deleted remote branch: $branch"
  fi
}

prune() {
  # shellcheck disable=2207
  branches=($(merged_branches))

  for branch in "${branches[@]}"; do
    delete_local_branch "$branch"
    delete_remote_branch "$branch"
  done
}

prune_merged_branches() {
  preparing_to_delete
  (will_prune && prune) || true
}

merged_branch_check() {
  git fetch -p

  if merged_branches >/dev/null; then
    prune_merged_branches
  fi
}

finish() {
read -r -d '' toot_toot <<\EOM
Shipped.     .  o ..
             o . o o.o
                  ...oo
                    __[]__
                 __|_o_o_o\__
                 \""""""""""/
                  \. ..  . /
EOM

info "\n$toot_toot\n"
}

get_options "$@"
on_master || error "trying to ship from a branch other than master"
up_to_date || error "master and origin/master have diverged"
working_dir_clean || error "working directory isn't clean"
bump_version
build_image || error "couldn't build new image"
commit
pull_new_image || error "failed to pull the new image on the server"
merged_branch_check || error "could not prune merged branches"
finish
